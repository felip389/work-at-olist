Project Description

    This project consists in 2 apps. The first one (called signaling) is res-
ponsible for the HTTP REST API, which allows signaling from calls to be re-
corded on the project database. The second app (called billing) is responsi-
ble for the front-end and all the data processing; this app will filter the
required data from database, do every needed calculation, and finally show
the detailed bill on its front-end.
    The billing app is hardcoded to calculate the bill for "America/Sao_Paulo"
timezone. User must give the signaling timestamp from wherever he signals,
and although the app needs the timezone from the incoming signal, the billing
output will be calculated with "America/Sao_Paulo" timezone.
    There are some ids reserved for automated tests:
    -id: from 0 to 100 are reserved for system testing
    -call_id: from 0 to 50 are reserved for system testing

API

    Signaling

    <host>/signaling/

    Billing

    <host>/billing/bill


Installing

    In order to install this project locally, there are a few packages which
should be installed. Those are:
    -Python3.6.4
        -Python-Django framework
        -Python_rest_framework
        -python-dateutil
        -pygments
        -gunicorn
        -python-decouple
        -whitenoise
        -dj-database-url
        -dj-static
        -psycopg2-binary

    On psql a table named 'callbilling' should be created and a user to be
used to access this table through django framework (configurable under work-
at-olist/callBilling/settings.py DATABASES). Ex (used access on dev).:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'callbilling',
        'USER': 'felipe',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
    }
}


Testing

    There are automated tests for the bill calculations algorithm, and for the
signaling validation. Go to the project main folder '../work-at-olist/' and run:

    For billing algorithm:
        sudo python3 manage.py shell
        >> from dataprocessing import tests
        >> testes.shell_test_calculate_bill()

    for signaling validation algorithm:
        sudo python3 manage.py shell
        >> from dataprocessing import tests
        >> testes.shell_test_signaling_validator()

Fields validation

    Signaling payload

    -id: must be a positive integer, and each given id must be unique, system
    will check database for each given id for duplicates. Values within 0 and
    100 are reserved for automated testing.
    -callType: must be a string, and system will check for 2 types, "Start" and
    "End" exactly.
    -call_id: must be a positive integer, and it is an id which represents the
    call itself. For a same call_id, the signaling will be accepted if:
        1- callType is "Start" and call_id was not initiated;
        2- callType is "End" and there is another signal with same call_id and
        callType "Start"
        3- if there are already both call types for a call_id, no further sig-
        naling is allowed for the same call_id
    Values within 0 and 50 are reserved for automated testing.
    -timestamp: the timestamp will have to follow this format:
            'YYYY-MM-DD hh:mm:ss-hh:mm'
    regex: "^\d{4}-\d\d-\d\d.\d\d:\d\d:\d\d[+-]\d\d:\d\d$"
    Any timestamp will be accepted for "Start" calls, but for "End" calls, vali-
    dator will check first if the call was already started for the same call_id
    and afterwards it'll check if the "Start" timestamp is older than the "End"
    one.
    -'source' and 'destination': must be a string, it'll be check for only num-
    bers and 10 or 11 digits. These fields are optional for the "End" call type
    as it will be nullified at the validator, but these fields are mandatory
    when the call type is "Start"

    Billing

    -source: must be a string with 10 or 11 numbers
    -year: must be a string with 4 numbers
    -month: must be a string with 1 or 2 numbers


Environment

    The development environment used to run this project was a VM with ubuntu
14.04 LTS with GUI, and the IDE is pycharm community edition. The VM runs on
virtual box under a windows 10, and on the vm's configuration, the LAN board
was set as bridged, so this OS could connect itself to the LAN and be accessible
from its host. On host side, google chrome was used to test the front-end inter-
face and postman was used to test the HTTP REST API.